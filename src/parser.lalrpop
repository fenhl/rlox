use {
    std::iter,
    crate::{
        ast::*,
        lexer::*,
    },
};

grammar;

extern {
    type Location = u32;
    type Error = crate::error::Error;

    enum Token {
        AND => AND(<u32>),
        CLASS => CLASS(<u32>),
        ELSE => ELSE(<u32>),
        FALSE => FALSE(<u32>),
        FOR => FOR(<u32>),
        FUN => FUN(<u32>),
        IF => IF(<u32>),
        NIL => NIL(<u32>),
        OR => OR(<u32>),
        PRINT => PRINT(<u32>),
        RETURN => RETURN(<u32>),
        SUPER => SUPER(<u32>),
        THIS => THIS(<u32>),
        TRUE => TRUE(<u32>),
        VAR => VAR(<u32>),
        WHILE => WHILE(<u32>),
        IDENTIFIER => IDENTIFIER(<(u32, String)>),
        NUMBER => NUMBER(<(u32, f64)>),
        LEFT_PAREN => LEFT_PAREN(<u32>),
        RIGHT_PAREN => RIGHT_PAREN(<u32>),
        LEFT_BRACE => LEFT_BRACE(<u32>),
        RIGHT_BRACE => RIGHT_BRACE(<u32>),
        SEMICOLON => SEMICOLON(<u32>),
        COMMA => COMMA(<u32>),
        DOT => DOT(<u32>),
        MINUS => MINUS(<u32>),
        PLUS => PLUS(<u32>),
        SLASH => SLASH(<u32>),
        STAR => STAR(<u32>),
        BANG_EQUAL => BANG_EQUAL(<u32>),
        BANG => BANG(<u32>),
        EQUAL_EQUAL => EQUAL_EQUAL(<u32>),
        EQUAL => EQUAL(<u32>),
        LESS_EQUAL => LESS_EQUAL(<u32>),
        LESS => LESS(<u32>),
        GREATER_EQUAL => GREATER_EQUAL(<u32>),
        GREATER => GREATER(<u32>),
        STRING => STRING(<(u32, u32, String)>),
    }
}

pub(crate) Program = Declaration*;

Declaration = {
    //TODO classDecl
    FUN <name:IDENTIFIER> LEFT_PAREN <params:(<IDENTIFIER> <(COMMA <IDENTIFIER>)*>)?> RIGHT_PAREN LEFT_BRACE <body:Declaration*> <last_line:RIGHT_BRACE> => {
        let (name_line, name) = name;
        let params = params.map(|(first, rest)| iter::once(first).chain(rest).collect()).unwrap_or_default();
        Stmt::Fun { name, name_line, params, body, last_line }
    },
    VarDecl,
    OpenStatement,
    ClosedStatement,
};

VarDecl: Stmt = VAR <name:IDENTIFIER> <init:(EQUAL <Expression>)?> <last_line:SEMICOLON> => {
    let (name_line, name) = name;
    Stmt::Var { name, name_line, init, last_line }
};

Statement = { // to avoid the dangling else problem
    OpenStatement,
    ClosedStatement,
};

OpenStatement: Stmt = {
    FOR LEFT_PAREN <init:ForInit> <cond:Expression?> SEMICOLON <incr:Expression?> <right_paren_line:RIGHT_PAREN> <body:OpenStatement> => {
        let body = if let Some(incr) = incr { Stmt::Block { last_line: body.last_line(), stmts: vec![body, Stmt::Expr { expr: incr, last_line: right_paren_line }] } } else { body };
        let while_loop = Stmt::While { cond: cond.unwrap_or(Expr::True { line: 0 }), right_paren_line, body: Box::new(body) };
        if let Some(init) = init { Stmt::Block { last_line: while_loop.last_line(), stmts: vec![init, while_loop] } } else { while_loop }
    },
    IF LEFT_PAREN <cond:Expression> <right_paren_line:RIGHT_PAREN> <then:Statement> => Stmt::If { cond, right_paren_line, then: Box::new(then), else_: None },
    IF LEFT_PAREN <cond:Expression> <right_paren_line:RIGHT_PAREN> <then:ClosedStatement> ELSE <else_:OpenStatement> => Stmt::If { cond, right_paren_line, then: Box::new(then), else_: Some(Box::new(else_)) },
    WHILE LEFT_PAREN <cond:Expression> <right_paren_line:RIGHT_PAREN> <body:OpenStatement> => Stmt::While { cond, right_paren_line, body: Box::new(body) },
};

ClosedStatement = {
    FOR LEFT_PAREN <init:ForInit> <cond:Expression?> SEMICOLON <incr:Expression?> <right_paren_line:RIGHT_PAREN> <body:ClosedStatement> => {
        let body = if let Some(incr) = incr { Stmt::Block { last_line: body.last_line(), stmts: vec![body, Stmt::Expr { expr: incr, last_line: right_paren_line }] } } else { body };
        let while_loop = Stmt::While { cond: cond.unwrap_or(Expr::True { line: 0 }), right_paren_line, body: Box::new(body) };
        if let Some(init) = init { Stmt::Block { last_line: while_loop.last_line(), stmts: vec![init, while_loop] } } else { while_loop }
    },
    IF LEFT_PAREN <cond:Expression> <right_paren_line:RIGHT_PAREN> <then:ClosedStatement> ELSE <else_:ClosedStatement> => Stmt::If { cond, right_paren_line, then: Box::new(then), else_: Some(Box::new(else_)) },
    WHILE LEFT_PAREN <cond:Expression> <right_paren_line:RIGHT_PAREN> <body:ClosedStatement> => Stmt::While { cond, right_paren_line, body: Box::new(body) },
    SimpleStatement,
};

SimpleStatement: Stmt = {
    <expr:Expression> <last_line:SEMICOLON> => Stmt::Expr { <> },
    PRINT <expr:Expression> <last_line:SEMICOLON> => Stmt::Print { <> },
    <keyword_line:RETURN> <expr:Expression?> <last_line:SEMICOLON> => Stmt::Return { <> },
    LEFT_BRACE <stmts:Declaration*> <last_line:RIGHT_BRACE> => Stmt::Block { <> },
};

ForInit: Option<Stmt> = {
    VarDecl => Some(<>),
    <expr:Expression> <last_line:SEMICOLON> => Some(Stmt::Expr { <> }),
    SEMICOLON => None,
};

Expression = {
    <name:IDENTIFIER> EQUAL <value:Expression> => { //TODO field assignment
        let (name_line, name) = name;
        Expr::Assign { rcpt: None, name, name_line, value: Box::new(value) }
    },
    LogicOr,
};

LogicOr = { // simple optimization: make `or` right-associative so `true or x or y` only has to jump once
    <lhs:LogicAnd> OR <rhs:LogicOr> => Expr::Binary { lhs: Box::new(lhs), op: BinaryOp::Or, rhs: Box::new(rhs) },
    LogicAnd,
};

LogicAnd = { // simple optimization: make `and` right-associative so `false and x and y` only has to jump once
    <lhs:Equality> AND <rhs:LogicAnd> => Expr::Binary { lhs: Box::new(lhs), op: BinaryOp::And, rhs: Box::new(rhs) },
    Equality,
};

Equality = {
    <lhs:Equality> <op:EqualityOp> <rhs:Comparison> => Expr::Binary { lhs: Box::new(lhs), op, rhs: Box::new(rhs) },
    Comparison,
};

EqualityOp: BinaryOp = {
    BANG_EQUAL => BinaryOp::NotEqual,
    EQUAL_EQUAL => BinaryOp::Equal,
};

Comparison = {
    <lhs:Comparison> <op:ComparisonOp> <rhs:Term> => Expr::Binary { lhs: Box::new(lhs), op, rhs: Box::new(rhs) },
    Term,
};

ComparisonOp: BinaryOp = {
    GREATER => BinaryOp::Greater,
    GREATER_EQUAL => BinaryOp::GreaterEqual,
    LESS => BinaryOp::Less,
    LESS_EQUAL => BinaryOp::LessEqual,
};

Term = {
    <lhs:Term> <op:TermOp> <rhs:Factor> => Expr::Binary { lhs: Box::new(lhs), op, rhs: Box::new(rhs) },
    Factor,
};

TermOp: BinaryOp = {
    MINUS => BinaryOp::Sub,
    PLUS => BinaryOp::Add,
};

Factor = {
    <lhs:Factor> <op:FactorOp> <rhs:Unary> => Expr::Binary { lhs: Box::new(lhs), op, rhs: Box::new(rhs) },
    Unary,
};

FactorOp: BinaryOp = {
    SLASH => BinaryOp::Div,
    STAR => BinaryOp::Mul,
};

Unary = {
    <op:UnaryOp> <expr:Unary> => Expr::Unary { op, inner: Box::new(expr) },
    Call,
};

UnaryOp: UnaryOp = {
    BANG => UnaryOp::Not,
    MINUS => UnaryOp::Neg,
};

Call = {
    <rcpt:Call> LEFT_PAREN <args:(<Expression> <(COMMA <Expression>)*>)?> <last_line:RIGHT_PAREN> => {
        let args = args.map(|(first, rest)| iter::once(first).chain(rest).collect()).unwrap_or_default();
        Expr::Call { rcpt: Box::new(rcpt), args, last_line }
    },
    //TODO property access
    Primary,
};

Primary: Expr = {
    TRUE => Expr::True { line: <> },
    FALSE => Expr::False { line: <> },
    NIL => Expr::Nil { line: <> },
    //TODO this
    NUMBER => {
        let (line, value) = <>;
        Expr::Number { value, line }
    },
    STRING => {
        let (_, last_line, value) = <>;
        Expr::String { value, last_line }
    },
    IDENTIFIER => {
        let (line, name) = <>;
        Expr::Variable { name, line }
    },
    LEFT_PAREN <Expression> RIGHT_PAREN,
    //TODO super
};
