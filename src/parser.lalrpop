use {
    std::str::FromStr as _,
    lalrpop_util::ParseError,
    crate::ast::*,
};

grammar;

extern {
    type Error = crate::error::Error;
}

pub(crate) Program = Declaration*;

Declaration = {
    Statement,
    //TODO others
};

Statement: Stmt = {
    <Expression> ";" => Stmt::Expr(<>),
    "print" <Expression> ";" => Stmt::Print(<>),
    //TODO others
};

Expression: Expr = {
    <lhs:Expression> <op:EqOp> <rhs:Unary> => Expr::Binary(Box::new(lhs), op, Box::new(rhs)),
    Unary,
};

EqOp: BinaryOp = {
    "!=" => BinaryOp::NotEqual,
    "==" => BinaryOp::Equal,
};

Unary = {
    <op:UnaryOp> <expr:Unary> => Expr::Unary(op, Box::new(expr)),
    "true" => Expr::True,
    "false" => Expr::False,
    "nil" => Expr::Nil,
    r"[0-9]+(?:.[0-9]+)?" =>? f64::from_str(<>).map(Expr::Number).map_err(|e| ParseError::User { error: e.into() }),
    "(" <Expression> ")",
    //TODO others
};

UnaryOp: UnaryOp = {
    "!" => UnaryOp::Not,
    "-" => UnaryOp::Neg,
};
